# PySide imports
from PySide import QtGui 

# MSL Sim imports
from sim.model.robot import Robot
import sim.defaults as d


class MainWindow(QtGui.QMainWindow):
    """The main window. This window displays all the widgets."""
    def __init__(self):
        super(MainWindow, self).__init__()
        self.robot = Robot()
        self.loadGUI()
        # Give the plotting area the same robot as the rest of the GUI and start
        # updating it via timers
        self.ui.graphics_view.robot = self.robot
        self.ui.graphics_view.initialiseRobot()
        self.ui.graphics_view.start_timers()

    def loadGUI(self):
        """Load the GUI from the .py file that was generated by the .ui file
        using the pyside-uic tool."""
        # import generated .py file here to prevent circular reference
        from sim.view.gui import Ui_main_window
        self.ui = Ui_main_window()
        self.ui.setupUi(self)
        self.settings_to_default()
        self.connect_signals_to_slots()

    def connect_signals_to_slots(self):
        # -----
        # ROBOT
        # -----
        self.ui.robot_ang_vel_slider.valueChanged.connect(
                self.robot_ang_vel_changed)
        # --------
        # ODOMETER
        # --------

        # -----
        # LASER
        # -----
        self.ui.laser_range_slider.valueChanged.connect(
                self.laser_range_changed)
        self.ui.laser_range_box.valueChanged.connect(
                self.laser_range_changed)
        self.ui.laser_fov_slider.valueChanged.connect(
                self.laser_fov_changed)
        self.ui.laser_fov_box.valueChanged.connect(
                self.laser_fov_changed)
        self.ui.laser_res_slider.valueChanged.connect(
                lambda: self.laser_res_changed(self.ui.laser_res_slider.value()/10.0))
        self.ui.laser_res_box.valueChanged.connect(
                self.laser_res_changed)
        self.ui.laser_freq_slider.valueChanged.connect(
                self.laser_freq_changed)
        self.ui.laser_freq_box.valueChanged.connect(
                self.laser_freq_changed)
        self.ui.laser_noise_slider.valueChanged.connect(
                self.laser_noise_changed)
        self.ui.laser_noise_box.valueChanged.connect(
                self.laser_noise_changed)

    def settings_to_default(self):
        # -----
        # ROBOT
        # -----
        # --------
        # ODOMETER
        # --------

        # -----
        # LASER
        # -----
        self.laser_range_changed(d.LASER_RANGE)
        self.laser_fov_changed(d.LASER_MAX_ANGLE - d.LASER_MIN_ANGLE)
        self.laser_res_changed(d.LASER_RES)
        self.laser_freq_changed(d.LASER_FREQ)
        self.laser_noise_changed(d.LASER_NOISE)

    # --------------------------------------------------------------------------
    # SLOTS
    # --------------------------------------------------------------------------

    # -----
    # ROBOT
    # -----
    def robot_ang_vel_changed(self, value):
        self.ui.robot_ang_vel_slider.setValue(value)
        self.ui.robot_ang_vel_box.setValue(value)
        self.robot.max_ang_vel = value

    # --------
    # ODOMETER
    # --------
    # -----
    # LASER
    # -----
    def laser_range_changed(self, value):
        self.ui.laser_range_box.setValue(value)
        self.ui.laser_range_slider.setValue(value)
        self.robot.laser.range = value

    def laser_fov_changed(self, value):
        self.ui.laser_fov_box.setValue(value)
        self.ui.laser_fov_slider.setValue(value)
        self.robot.laser.min_angle = -value/2.0
        self.robot.laser.max_angle = value/2.0

    def laser_res_changed(self, value):
        self.ui.laser_res_slider.setValue(int(10*value))
        self.ui.laser_res_box.setValue(value)
        self.robot.laser.resolution = value

    def laser_freq_changed(self, value):
        self.ui.laser_freq_slider.setValue(value)
        self.ui.laser_freq_box.setValue(value)
        self.robot.laser.freq = value

    def laser_noise_changed(self, value):
        self.ui.laser_noise_slider.setValue(value)
        self.ui.laser_noise_box.setValue(value)
        self.robot.laser.noise = value/100.0 # convert to metres


